function filled = poisson_blend(source, target, mask)
%UNTITLED Summary of this function goes here
%   assumes target is a cropped portion of full target image with the same
% dimensions as source and mask. 
inds = find(mask);
laplacian_filter = [0, 1, 0; 1, -4, 1; 0, 1, 0];
filtered_source = imfilter(source, laplacian_filter);
masked_target = target.*(~mask);
%these will be the solutions to the systems of equations taking into
%account all known values
updated_source = filtered_source - (mask.*(imfilter(masked_target, laplacian_filter)));
b = updated_source(inds);
%non-zero vals

num_pix = length(inds);


subs = subscript(inds, size(mask, 1));
left = index([subs(:,1)+1, subs(:,2)], size(mask,1));
right = index([subs(:,1)-1, subs(:,2)], size(mask,1));
top = index([subs(:,1), subs(:,2)+1], size(mask,1));
bot = index([subs(:,1)+1, subs(:,2)-1], size(mask,1));
fin = [left,right,top,bot];
pixel_cols = [1:num_pix, 1:num_pix, 1:num_pix, 1:num_pix];
membs = ismember(fin,inds);


%TODO: create sparse i and sparse j to finish poisson blending
sparse_i = pixel_cols(membs);
sparse_j = fin(membs);
sparse_s = ones(size(sparse_i));
sparse_matrix = sparse(sparse_i, sparse_j, sparse_s, num_pix, num_pix);
x = sparse_matrix/b;

masked_target(inds) = x;
filled = masked_target;




end

%where M is from MxN matrix
function sub = subscript(ind_vec, M)
    sub = [rem(ind_vec-1, M)+1, floor(ind/M)+1];
end

function ind = index(sub_vec, M)
    ind = (sub_vec(:,1) + (sub_vec(:,2)-1)*M);
end
